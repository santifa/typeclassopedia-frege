{--
    For licensing see 'LICENSE' file

    This is an implementation after the guide Typeclassopedia from the Haskell wiki.
    See 'https://wiki.haskell.org/Typeclassopedia'

    To avoid name clashes I use a prepending T(ypeclassopedia) in front
    of all classes and some other things.

    I expect the reader of this document to read the Typeclassopedia along-side.
    This document is intended as a reference implementation of the code and examples.
    For your own sake try to solve the problems yourself.
    Only if you have no idea what to do look here.
--}

module com.santifa.Typeclassopedia where

-- Type declaration for a Functor.
class TFunctor f where
    tfmap :: (a -> b) -> f a -> f b

instance TFunctor [] where
    tfmap _ [] = []
    tfmap g (x:xs) = g x : fmap g xs

instance TFunctor Maybe where
    tfmap _ Nothing = Nothing
    tfmap g (Just a) = Just (g a)

-- Functor exercises
-- 1
instance TFunctor (Either a) where
    tfmap _ (Left e) = Left e
    tfmap g (Right a) = Right (g a)
    
instance TFunctor ((->) r) where
    tfmap g h = (\x -> g (h x))

-- 2
instance TFunctor ((,) e) where
    tfmap g ((,) e a) = ((,) e (g a))

data Pair a = Pair a a 
show' :: Show a => Pair a -> String
show' (Pair a b) = "Pair " ++  show a ++ " " ++ show b

instance TFunctor Pair where
    tfmap g (Pair a b) = Pair (g a) (g b)

-- I ommit the explanaitions. Do it yourself.
-- 3

data ITree a = Leaf (Int -> a) | Node [ITree a]
instance TFunctor ITree where
    tfmap g (Leaf a) = Leaf (g . a)
    tfmap g (Node xs) = Node (map (tfmap g) xs)

-- 4
-- Example of a type *->* which cannot made a Functor
-- It is not possible to write a fmap function for this
data T a = T (a -> Int)

{-- 5
     The composition of two Functors is also a Functor.
     This can be shown by simply generating a Functor that consists of a List and a Maybe functor
     E.g. f g = tfmap (tfmap g)

     Functor Law Exercises
     1 breaking the first law
     2 what laws are violated
     instance TFunctor [] where
        tfmap _ [] = []
        tfmap g (x:xs) = g x : g x : tfmap g xs

     Comment out the first instance for [] and comment in this one to try it out.
     This tfmap definition only breaks the first law and holds the second.
     try it out with x = [1,2] g = (2+) and h = (2*) it hold on composition but not on id
--}


-- Applicatives
-- again we use different name as in the standard library
class TApplicative (TFunctor f) => f where
    tpure :: a -> f a
    (<**>) :: f (a -> b) -> f a -> f b
    
{-- Law Exercise
     prove that pure f <*> x = pure (flip ($)) <*> x <*> pure f
     flip :: (a -> b -> c) -> b -> a -> c
     
    Let's look at the types
    pure f <*> x has the type: (a -> b) -> f a -> f b so we take a function and apply a effectful value
    x can be written as a pure type
    = pure f <*> pure x we apply the interchange
    = pure ($ pure x) <*> pure f we rewrite pure x as x and get it out of the ()
    = pure ($) <*> x <*> pure f consider the pure arguments are in the wrong order for ($)
    = pure (flip $) <*> x <*> pure f    
--}
  
{--
	an example instance of the maybe class
--}
instance TApplicative Maybe where
	tpure a = Just a
	Nothing <**> _ = Nothing
	_ <**> Nothing = Nothing
	(Just a) <**> (Just b) = Just (a b)  	


{--
	For List we use the nondeterministic point of view. 
	we apply the functions to all inputs in turn and collect all results. 
--}
instance TApplicative [] where
	tpure x =[x]
	gs <**> xs = [g x | g <- gs, x <- xs]

{--
	There is a second point of view to list. list are ordered collections of elements
--}
data ZipList a = ZipList {getZipList :: [a]}
derive Show ZipList a

instance TApplicative ZipList where
	-- in frege we need to define the functor instance for ziplist
	tfmap _ (ZipList []) = ZipList []
	tfmap g (ZipList xs) = ZipList (map g xs)
	-- the applicative definition with the correct pure implementation
	tpure x = ZipList (repeat x)
	(ZipList gs) <**> (ZipList xs) = ZipList (zipWith ($) gs xs) 
